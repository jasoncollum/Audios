// <auto-generated />
using System;
using Audios.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Audios.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Audios.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5eec0ba9-4f79-43a6-979e-72239d765fed",
                            Email = "jason@email.com",
                            EmailConfirmed = true,
                            FirstName = "Jason",
                            LastName = "Collum",
                            LockoutEnabled = false,
                            NormalizedEmail = "JASON@EMAIL.COM",
                            NormalizedUserName = "JASON@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKdtOzhm2XnkVWSKacbwTkz/XUH52EjX9UtDsmD8H1xvNQ7Vj/ejIqC1LNHuTeRfOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577",
                            TwoFactorEnabled = false,
                            UserName = "jason@email.com"
                        });
                });

            modelBuilder.Entity("Audios.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Artist");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "~/images/perrin-lamb.jpg",
                            Name = "Perrin Lamb"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "~/images/bandit-heart.png",
                            Name = "Bandit Heart"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "~/images/veaux.png",
                            Name = "Veaux"
                        });
                });

            modelBuilder.Entity("Audios.Models.PRO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PRO");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ASCAP"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BMI"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SESAC"
                        });
                });

            modelBuilder.Entity("Audios.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Playlist");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            Name = "Perrin Lamb Songs"
                        });
                });

            modelBuilder.Entity("Audios.Models.PlaylistSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlaylistId");

                    b.Property<int>("SongId");

                    b.Property<int>("TrackNumber");

                    b.HasKey("Id");

                    b.ToTable("PlaylistSong");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlaylistId = 1,
                            SongId = 1,
                            TrackNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            PlaylistId = 1,
                            SongId = 2,
                            TrackNumber = 2
                        });
                });

            modelBuilder.Entity("Audios.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sorted Noise"
                        });
                });

            modelBuilder.Entity("Audios.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistId");

                    b.Property<string>("AudioUrl")
                        .IsRequired();

                    b.Property<decimal?>("Bpm");

                    b.Property<string>("Lyrics");

                    b.Property<int?>("PlaylistId");

                    b.Property<string>("SearchWords");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("VocalId");

                    b.Property<bool>("isOneStop");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Song");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = 1,
                            AudioUrl = "",
                            Lyrics = "",
                            SearchWords = "acoustic, folk",
                            Title = "Everyone's Got Something",
                            VocalId = 1,
                            isOneStop = true
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = 1,
                            AudioUrl = "",
                            Lyrics = "",
                            SearchWords = "acoustic, folk, christmas, holiday",
                            Title = "Have Yourself A Merry Little Christmas",
                            VocalId = 1,
                            isOneStop = false
                        },
                        new
                        {
                            Id = 3,
                            ArtistId = 2,
                            AudioUrl = "",
                            Lyrics = "",
                            SearchWords = "piano",
                            Title = "Back To Black",
                            VocalId = 1,
                            isOneStop = true
                        },
                        new
                        {
                            Id = 4,
                            ArtistId = 2,
                            AudioUrl = "",
                            Lyrics = "",
                            SearchWords = "piano, cover, Patsy Cline",
                            Title = "Back In Baby's Arms",
                            VocalId = 1,
                            isOneStop = false
                        },
                        new
                        {
                            Id = 5,
                            ArtistId = 3,
                            AudioUrl = "",
                            Lyrics = "",
                            SearchWords = "pop rock, cover, Sheryl Crow, trailer, movie",
                            Title = "Safe And Sound",
                            VocalId = 1,
                            isOneStop = false
                        });
                });

            modelBuilder.Entity("Audios.Models.SongWriter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SongId");

                    b.Property<int>("WriterId");

                    b.HasKey("Id");

                    b.ToTable("SongWriter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SongId = 1,
                            WriterId = 1
                        });
                });

            modelBuilder.Entity("Audios.Models.Vocal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Vocal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Male/Female"
                        },
                        new
                        {
                            Id = 4,
                            Type = "None"
                        });
                });

            modelBuilder.Entity("Audios.Models.Writer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PROId");

                    b.Property<int>("PublisherId");

                    b.Property<int?>("SongId");

                    b.HasKey("Id");

                    b.HasIndex("PROId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SongId");

                    b.ToTable("Writer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Perrin Lamb",
                            PROId = 1,
                            PublisherId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Audios.Models.Playlist", b =>
                {
                    b.HasOne("Audios.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Audios.Models.Song", b =>
                {
                    b.HasOne("Audios.Models.Artist", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Audios.Models.Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId");
                });

            modelBuilder.Entity("Audios.Models.Writer", b =>
                {
                    b.HasOne("Audios.Models.PRO", "PRO")
                        .WithMany("Writers")
                        .HasForeignKey("PROId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Audios.Models.Publisher", "Publisher")
                        .WithMany("Writers")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Audios.Models.Song")
                        .WithMany("Writers")
                        .HasForeignKey("SongId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Audios.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Audios.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Audios.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Audios.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
